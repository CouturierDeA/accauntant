/*! normalize.css v5.0.0 | MIT License | github.com/necolas/normalize.css */

/**
 * 1. Change the default font family in all browsers (opinionated).
 * 2. Correct the line height in all browsers.
 * 3. Prevent adjustments of font size after orientation changes in
 *    IE on Windows Phone and in iOS.
 */

/* Document
   ========================================================================== */

html {
  font-family: sans-serif; /* 1 */
  line-height: 1.15; /* 2 */
  -ms-text-size-adjust: 100%; /* 3 */
  -webkit-text-size-adjust: 100%; /* 3 */
}

/* Sections
   ========================================================================== */

/**
 * Remove the margin in all browsers (opinionated).
 */

body {
  margin: 0;
}

/**
 * Add the correct display in IE 9-.
 */

article,
aside,
footer,
header,
nav,
section {
  display: block;
}

/**
 * Correct the font size and margin on `h1` elements within `section` and
 * `article` contexts in Chrome, Firefox, and Safari.
 */

h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/* Grouping content
   ========================================================================== */

/**
 * Add the correct display in IE 9-.
 * 1. Add the correct display in IE.
 */

figcaption,
figure,
main { /* 1 */
  display: block;
}

/**
 * Add the correct margin in IE 8.
 */

figure {
  margin: 1em 40px;
}

/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Show the overflow in Edge and IE.
 */

hr {
  box-sizing: content-box; /* 1 */
  height: 0; /* 1 */
  overflow: visible; /* 2 */
}

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */

pre {
  font-family: monospace, monospace; /* 1 */
  font-size: 1em; /* 2 */
}

/* Text-level semantics
   ========================================================================== */

/**
 * 1. Remove the gray background on active links in IE 10.
 * 2. Remove gaps in links underline in iOS 8+ and Safari 8+.
 */

a {
  background-color: transparent; /* 1 */
  -webkit-text-decoration-skip: objects; /* 2 */
}

/**
 * Remove the outline on focused links when they are also active or hovered
 * in all browsers (opinionated).
 */

a:active,
a:hover {
  outline-width: 0;
}

/**
 * 1. Remove the bottom border in Firefox 39-.
 * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
 */

abbr[title] {
  border-bottom: none; /* 1 */
  text-decoration: underline; /* 2 */
  text-decoration: underline dotted; /* 2 */
}

/**
 * Prevent the duplicate application of `bolder` by the next rule in Safari 6.
 */

b,
strong {
  font-weight: inherit;
}

/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */

b,
strong {
  font-weight: bolder;
}

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */

code,
kbd,
samp {
  font-family: monospace, monospace; /* 1 */
  font-size: 1em; /* 2 */
}

/**
 * Add the correct font style in Android 4.3-.
 */

dfn {
  font-style: italic;
}

/**
 * Add the correct background and color in IE 9-.
 */

mark {
  background-color: #ff0;
  color: #000;
}

/**
 * Add the correct font size in all browsers.
 */

small {
  font-size: 80%;
}

/**
 * Prevent `sub` and `sup` elements from affecting the line height in
 * all browsers.
 */

sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}

/* Embedded content
   ========================================================================== */

/**
 * Add the correct display in IE 9-.
 */

audio,
video {
  display: inline-block;
}

/**
 * Add the correct display in iOS 4-7.
 */

audio:not([controls]) {
  display: none;
  height: 0;
}

/**
 * Remove the border on images inside links in IE 10-.
 */

img {
  border-style: none;
}

/**
 * Hide the overflow in IE.
 */

svg:not(:root) {
  overflow: hidden;
}

/* Forms
   ========================================================================== */

/**
 * 1. Change the font styles in all browsers (opinionated).
 * 2. Remove the margin in Firefox and Safari.
 */

button,
input,
optgroup,
select,
textarea {
  font-family: sans-serif; /* 1 */
  font-size: 100%; /* 1 */
  line-height: 1.15; /* 1 */
  margin: 0; /* 2 */
}

/**
 * Show the overflow in IE.
 * 1. Show the overflow in Edge.
 */

button,
input { /* 1 */
  overflow: visible;
}

/**
 * Remove the inheritance of text transform in Edge, Firefox, and IE.
 * 1. Remove the inheritance of text transform in Firefox.
 */

button,
select { /* 1 */
  text-transform: none;
}

/**
 * 1. Prevent a WebKit bug where (2) destroys native `audio` and `video`
 *    controls in Android 4.
 * 2. Correct the inability to style clickable types in iOS and Safari.
 */

button,
html [type="button"], /* 1 */
[type="reset"],
[type="submit"] {
  -webkit-appearance: button; /* 2 */
}

/**
 * Remove the inner border and padding in Firefox.
 */

button::-moz-focus-inner,
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner {
  border-style: none;
  padding: 0;
}

/**
 * Restore the focus styles unset by the previous rule.
 */

button:-moz-focusring,
[type="button"]:-moz-focusring,
[type="reset"]:-moz-focusring,
[type="submit"]:-moz-focusring {
  outline: 1px dotted ButtonText;
}

/**
 * Change the border, margin, and padding in all browsers (opinionated).
 */

fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em;
}

/**
 * 1. Correct the text wrapping in Edge and IE.
 * 2. Correct the color inheritance from `fieldset` elements in IE.
 * 3. Remove the padding so developers are not caught out when they zero out
 *    `fieldset` elements in all browsers.
 */

legend {
  box-sizing: border-box; /* 1 */
  color: inherit; /* 2 */
  display: table; /* 1 */
  max-width: 100%; /* 1 */
  padding: 0; /* 3 */
  white-space: normal; /* 1 */
}

/**
 * 1. Add the correct display in IE 9-.
 * 2. Add the correct vertical alignment in Chrome, Firefox, and Opera.
 */

progress {
  display: inline-block; /* 1 */
  vertical-align: baseline; /* 2 */
}

/**
 * Remove the default vertical scrollbar in IE.
 */

textarea {
  overflow: auto;
}

/**
 * 1. Add the correct box sizing in IE 10-.
 * 2. Remove the padding in IE 10-.
 */

[type="checkbox"],
[type="radio"] {
  box-sizing: border-box; /* 1 */
  padding: 0; /* 2 */
}

/**
 * Correct the cursor style of increment and decrement buttons in Chrome.
 */

[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

/**
 * 1. Correct the odd appearance in Chrome and Safari.
 * 2. Correct the outline style in Safari.
 */

[type="search"] {
  -webkit-appearance: textfield; /* 1 */
  outline-offset: -2px; /* 2 */
}

/**
 * Remove the inner padding and cancel buttons in Chrome and Safari on macOS.
 */

[type="search"]::-webkit-search-cancel-button,
[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
 * 1. Correct the inability to style clickable types in iOS and Safari.
 * 2. Change font properties to `inherit` in Safari.
 */

::-webkit-file-upload-button {
  -webkit-appearance: button; /* 1 */
  font: inherit; /* 2 */
}

/* Interactive
   ========================================================================== */

/*
 * Add the correct display in IE 9-.
 * 1. Add the correct display in Edge, IE, and Firefox.
 */

details, /* 1 */
menu {
  display: block;
}

/*
 * Add the correct display in all browsers.
 */

summary {
  display: list-item;
}

/* Scripting
   ========================================================================== */

/**
 * Add the correct display in IE 9-.
 */

canvas {
  display: inline-block;
}

/**
 * Add the correct display in IE.
 */

template {
  display: none;
}

/* Hidden
   ========================================================================== */

/**
 * Add the correct display in IE 10-.
 */

[hidden] {
  display: none;
}
@charset "UTF-8";

/**
 * Install dependencies
 *
 * @source npm install include-media --save
 *
 */



.table_footer:hover,
.table__row:hover {
  background-color: #f8f9f9;
}

.table_header {
  background-color: #435993;
  color: #fff;
}

/**
* Миксин формирует колоночную сетку с помощью float
*
* @var string $column Колличество колонок
* @var string $indent Отступ между колонками
*
* @example "@include floatgrid(2, 20px)"
* @example "@include floatgrid(6, 10px)"
* @example "@include floatgrid(8)"
*/

/**
* Миксин формирует колоночную сетку с помощью inline-block
*
* @var string $column Колличество колонок
* @var string $indent Отступ между колонками
*
* @example "@include inlinegrid(2, 20px)"
* @example "@include inlinegrid(6, 10px)"
* @example "@include inlinegrid(8)"
*/

/**
* Миксин формирует колоночную сетку с помощью float
*
* @var string $column Колличество колонок
* @var string $indent Отступ между колонками
*
* @example "@include grid(3, 20px)"
* @example "@include grid(6, 10px)"
* @example "@include grid(8)"
*/

/**
* Миксин группирует свойства по медиа запросам
*
* @var string $property Изменяемое свойство
* @var string $values Массив со значениями для разрешения
*
* @example "@include media-set(font-size, (m: 12px, t: 14px, d: 16px))"
* @example "@include media-set(margin-bottom, (m: 10px, d: 30px, d-3k: 50px))"
*/

body {
  font-family: "Roboto", sans-serif;
  overflow-x: hidden;
}

body,
html {
  min-height: 100%;
  -webkit-overflow-scrolling: touch !important;
}

html.no_scroll {
  overflow: hidden;
}

html.no_scroll body {
  overflow: hidden;
}

main {
  padding-top: 80px;
}

img {
  display: block;
  max-width: 100%;
}

svg {
  display: block;
}

use {
  display: block;
}

a {
  display: block;
  text-decoration: none;
  color: inherit;
}

button,
input,
fieldset {
  background-color: transparent;
  -webkit-appearance: none;
  border: none;
  outline: none;
}

button:focus,
input:focus,
fieldset:focus {
  outline: none;
}

li {
  list-style: none;
  padding: 0;
}

ul,
ol {
  margin: 0;
  padding: 0;
}

h1,
h2,
h3,
h4,
h5 {
  margin: 0;
  color: #1c1c1c;
}

.table {
  max-width: 822px;
  margin-left: auto;
  margin-right: auto;
  display: table;
  width: 100%;
  margin-top: 70px;
}

.table_footer {
  display: table-footer-group;
}

.table_header {
  display: table-header-group;
  font-size: 18px;
}

.table__row {
  display: table-row;
  width: 100%;
}

.table__row.mod--total {
  background-color: #e8e8e8;
}

.table__cell {
  display: table-cell;
  text-align: center;
  vertical-align: middle;
  border-top: 1px solid;
  border-bottom: 1px solid;
  border-right: 1px solid;
  border-color: #d9d9d9;
  padding: 0 24px;
  height: 70px;
}

.table__cell:first-child {
  text-align: left;
  font-weight: 500;
  border-left: 1px solid;
  border-color: #d9d9d9;
}

.table__cell:first-child input {
  text-align: left;
}

.table__cell input {
  text-align: center;
  line-height: 30px;
}

.table__cell:nth-last-of-type(2) {
  text-align: center;
}

.table_row .table__cell:hover {
  background-color: #d9d9d9;
}

.table_header .table__cell {
  border-color: #4e68ac;
}

.table_header .table__cell:first-child {
  border-radius: 4px 0 0 0;
}

.table_header .table__cell:last-child {
  border-radius: 0 4px 0 0;
}

.table_header .table__cell:hover {
  background-color: #4e68ac;
}

.table_footer .table__cell {
  position: relative;
}

.table_footer .table__cell:first-child {
  border-radius: 0 0 0 4px;
}

.table_footer .table__cell:last-child {
  border-radius: 0 0 4px 0;
}

.table_footer .table__cell::before {
  content: '';
  position: absolute;
  top: -1px;
  width: 100%;
  left: 0;
  height: 1px;
  background-color: #5c5c5c;
}

.fade-enter-active,
.fade-leave-active {
  transition: opacity .5s;
}

.fade-enter,
.fade-leave-to {
  opacity: 0;
}

.table__btn {
  width: 60px;
  font-weight: 600;
  cursor: pointer;
}

.table__btn.mod--delete:hover {
  color: #d32f2f;
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */